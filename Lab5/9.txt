#|| exercise 9a
MATHEMATICAL MODEL

merge-list(l1l2...ln, k1k2...km) = 
            k1k2...km, if n=0
            l1l2...ln, if m=0
            {l1} U merge-list(l2...ln, k1k2...km), if l1<=k1
            {k1} U merge-list(l1l2...ln, k2...km), otherwise
|#

(defun merge-list(l k)
  (cond
    ((null l) k)
    ((null k) l)
    ((<= (car l) (car k)) 
      (cons(car l)(merge-list (cdr l) k)))

    (t (cons(car k)(merge-list l (cdr k))))
  )
)



(defun removeDup(l)
  (cond
    ((null l) ())
    ((and (atom(car l))(null (cdr l))) l)
    ((eql (car l) (cadr l)) (removeDup (cdr l)))
    (t (cons (car l)(removeDup(cdr l))))
  )
)


(defun mergeUnique(l k)
  (removeDup(merge-list l k))
)



#|| exercise 9b
MATHEMATICAL MODEL

replaceE(l1l2...ln, rl, e)=
            (), if n=0
            replaceE(l1, rl, e) U replaceE(l2...ln, rl, e), if l1 is a list
            {rl} U replaceE(l2...ln, rl, e), if l1 = e
            {l1} U replaceE(l2...ln, rl, e), otherwise
|#

(defun replaceE(l rl e)
  (cond
    ((null l) nil)
    ((listp(car l))
      (cons(replaceE (car l) rl e)(replaceE (cdr l) rl e)) )
    ((eql (car l) e) 
      (cons rl (replaceE (cdr l) rl e)))
    (t (cons (car l)(replaceE (cdr l) rl e)))
  )
)

#||exercise 9c
MATHEMATICAL MODEL

listsAppend(l1l2...ln, k1k2...km)=
        k1k2...km, if n=0
        {l1} U listsAppend(l2...ln, k1k2...km), otherwise

|#

(defun listsAppend(l k)
  (cond
    ((null l) k)
    (t (cons (car l) (listsAppend(cdr l) k)))
  )
)

#|| 
reverseNr(l1l2...ln)=
        (), if n=0
        listsAppend(reverseNr(l2...ln), reverseNr(l1)), if l1 is a list
        listsAppend(reverseNr(l2...ln), list(l1)), otherwise

|#

(defun reverseNr(l)
  (cond ((null l) nil)
        ((listp (car l)) (listsAppend (reverseNr(cdr l)) (reverseNr(car l))))
        (t (listsAppend (reverseNr(cdr l)) (list(car l))))
  )
)

#|| 
carry(e1,e2,c) = 
      1, if (e1+e2+c)>9
      0, otherwise
|#

(defun carry(e1 e2 c)
  (cond
    ((> (+(+ e1 e2)c) 9) 1)
    (t 0)
  )
)

#|| 
lastDigit(e1, e2, c)=
      (e1+e2+c)%10, if (e1+e2+c)>9
      e1+e2+c, otherwise
|#

(defun lastDigit(e1 e2 c)
  (cond
    ((> (+(+ e1 e2) c) 9)
      (mod(+(+ e1 e2) c) 10))
    (t (+(+ e1 e2) c))
  )
)


#|| 
sumLists(l1l2...ln, k1k2...km, c, r)=
                    r, if n=0 && m=0 && c=0
                    c, if n=0 && m=0 && c!=0
                    sumLists(l2...ln, k1k2...km, carry(l1, 0, c) lastDigit(l1, 0, c) U {r}), if m=0
                    sumLists(l1l2...ln, k2...km, carry(0, k1, c) lastDigit(0, k1, c) U {r}), if n=0
                    sumLists(l2...ln, k2...km, carry(l1, k1, c) lastDigit(l1, k1, c) U {r}), otherwise
|#

(defun sumLists(l k c r)
  (cond
    ((and (null l)(null k)(= 0 c)) r)
    ((and (null l)(null k)(/= 0 c)) (cons c r))
    ((null k) (sumLists (cdr l) k (carry (car l) 0 c) (cons (lastDigit (car l) 0 c) r)))
    ((null l)   (sumLists l (cdr k) (carry 0 (car k) c) (cons (lastDigit 0 (car k) c) r)))
    (t (sumLists (cdr l)(cdr k) (carry (car l)(car k) c) (cons (lastDigit (car l)(car k) c) r)))
  )
)

#|| 
mainSumLists(l1l2...ln, k1k2...km)=
            sumLists(reverseNr(l1l2...ln), reverseNr(k1k2...km), 0 , ())
|#

(defun mainSumLists(l1 l2)
  (cond
    (t (sumLists (reverseNr l1) (reverseNr l2) 0 ()))
  )
)

#||exercise 9d
MATHEMATICAL MODEL

MyGcd(a b) = 
    0, if a!=number && b!=number
    b, if a!=number
    a, if b!=number
    a, if a=b
    MyGcd(a-b,b), if a>b
    MyGcd(a,b-a), otherwise
|#

(defun MyGcd(a b)
  (cond
    ((and (not (numberp a)) (not (numberp b))) 0)
    ((not (numberp a)) b)
    ((not (numberp b)) a)
    ((eql a b) a)
    ((> a b)(MyGcd (- a b) b))
    (t (MyGcd a (- b a)))  
  )
)

#||
gcdList(l1l2...ln)=
        {l1} , if l1 is atom and n=1
        MyGcd(gcdList(l1), gcdList(l2...ln)), if l1 is a list and n>1
        MyGcd(l1, gcdList(l2...ln)), otherwise
 |#

(defun gcdList(l)
  (cond
    ((and (atom (car l))(null (cdr l))) (car l))
    ((listp (car l)) (MyGcd (gcdList (car l))(gcdList (cdr l))))
    (t (MyGcd (car l) (gcdList (cdr l))))
  )
)

#||
----------------------------------------------

TESTING TIME 

----------------------------------------------
|#

(defun testMergeList()
  (assert
    (and
      (equal (merge-list '(1 2 3) '(1 2 4)) '(1 1 2 2 3 4))
      (equal (merge-list '(1 2 3) '()) '(1 2 3))
      (equal (merge-list '() '()) '())
    )
  )
)
(defun testMergeListUnique()
  (assert
    (and
      (equal (mergeUnique '(1 2 3 3) '(1 1 2 4)) '(1 2 3 4))
      (equal (mergeUnique '(1 1 2 3) '()) '(1 2 3))
      (equal (mergeUnique '() '()) '())
    )
  )
)

(defun testReplaceE()
  (assert
    (and
      (equal (replaceE '(1 2 (1 2) 3) '(1) 2) '(1 (1) (1 (1)) 3))
      (equal (replaceE '(1 2 3) '() 2) '(1 () 3))
      (equal (replaceE '() '(1 2 3) 4) '())
    )
  )
)

(defun testSumLists()
  (assert
    (and
      (equal (mainSumLists '(1 2 3) '(1 2 4)) '(2 4 7))
      (equal (mainSumLists '(1 2 3) '(9 9 9)) '(1 1 2 2))
      (equal (mainSumLists '(1 2 (3 4) 5) '((1) 0 0 (1 2))) '(2 2 3 5 7))
    )
  )
)

(defun testGcdList()
  (assert
    (and
      (equal (gcdList '(a 24 (4 b) 6)) 4)
      (equal (gcdList ()) 0)
      (equal (gcdList(a b c(d (e)))) 0)
    )
  )
)


(defun testL1()
  (and
    (testMergeList)
    (testReplaceE)
    (testSumLists)
    (testGcdList)
    (testMergeListUnique)
  )
)

